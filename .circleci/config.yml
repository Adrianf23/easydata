# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: continuumio/miniconda3

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout
      
      - run:
          name: Set up Conda
          command: |
            conda init bash
            conda update --yes --quiet conda;
            export CONDA_EXE=/home/circleci/miniconda/bin/conda
            sed -ne '/>>> conda initialize/,/<<< conda initialize/p' ~/.bashrc >> $BASH_ENV 
      
      - run:
          name: Build cookiecutter environment and test-env project
          command: |
            conda create -n cookiecutter --yes python=3.8 make
            conda activate cookiecutter
            pip install cookiecutter
            pip install ruamel.yaml
            mkdir -p /home/circleci/.cookiecutter_replay
            cp circleci-cookiecutter-easydata.json /home/circleci/.cookiecutter_replay/cookiecutter-easydata.json
            pwd
            cookiecutter --config-file .cookiecutter-easydata-test-circleci.yml . -f --no-input
            conda deactivate

      - run:
          name: Create test-env environment and contrive to always use it
          command: |
            cd test-env
            export CONDA_EXE=/home/circleci/miniconda/bin/conda
            make create_environment
            conda activate test-env
            conda install -c anaconda make
            touch environment.yml
            make update_environment
            echo "conda activate test-env" >> $BASH_ENV;

      - run:
          name: Create test report directory
          command: |
            mkdir test-reports

      # Cache dependencies
      - save_cache:
          key: pip-cache
          paths:
            - ~/.cache/pip

      - restore_cache:
          keys:
            - pip-cache

      - run:
          name: Run tests
          command: |
            cd test-env
            python src/tests/make_test_datasets.py
            make test CI_RUNNING=yes

      - run:
          name: Run documentation notebook tests
          command: |
            cd docs
            pytest -v test_docs.py

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports
          destination: test-reports
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
